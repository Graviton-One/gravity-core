{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


#-------------------Constants---------------------------
let NONE = 0

#----Statuses-----
let NEW = 1
let COMPLETED = 2

#----Actions------
let APPROVE = 1
let UNLOCK = 2

#----Types--------
let LOCKTYPE = 1
let UNLOCKTYPE = 2

#-------------------Base functions----------------------
func getIntegerByKey(key: String) = {
    match (getInteger(this, key)) {
        case v:Int => v
        case _ => 0
      } 
}
func getBytesByKey(key: String) = {
    match (getBinary(this, key)) {
        case v:ByteVector => v
        case _ => base64'0'
    }
}
func getStringByKey(key: String) = {
    match (getString(this, key)) {
        case v:String => v
        case _ => ""
    }
}

#-------------------Constructor-------------------------
let AssetIdKey = "asset_id"

#-------------------Keys--------------------------------
let FirstRqKey = "first_rq"
let LastRqKey = "last_rq"
let NebulaAddressKey = "nebula_address"

func getNextRqKey(id: String) = "next_rq_" + id
func getPrevRqKey(id: String) = "prev_rq_" + id

func getRqReceiverKey(id: String) = "rq_receiver_" + id
func getRqAmountKey(id: String) = "rq_amount_" + id
func getRqStatusKey(id: String) = "rq_status_" + id
func getRqTypeKey(id: String) = "rq_type_" + id

#-------------------Global vars-------------------------
let nebulaAddress = addressFromStringValue(getStringByKey(NebulaAddressKey))
let assetId = fromBase58String(getStringByKey(AssetIdKey))

let firstRq = getStringByKey(FirstRqKey)
let lastRq = getStringByKey(LastRqKey)

#-------------------Get functions----------------------
func getNextRq(id: String) = getStringByKey(getNextRqKey(id))
func getPrevRq(id: String) = getStringByKey(getPrevRqKey(id))

func getRqAmount(id: String) = getIntegerByKey(getRqAmountKey(id))
func getRqStatus(id: String) = getIntegerByKey(getRqStatusKey(id))
func getRqType(id: String) = getIntegerByKey(getRqTypeKey(id))
func getRqReceiver(id: String) = getStringByKey(getRqReceiverKey(id))
#-------------------Callable---------------------------

@Callable(i)
func attachData(v: ByteVector) = {
    let action = toInt(v.take(8))
    let rqId = toBase58String(v.drop(8).take(32))
    if (i.caller != nebulaAddress)
        then throw("invalid sender")
    else if (action == UNLOCK) then {
        let amount = toInt(v.drop(40).take(8))
        if (getRqStatus(rqId) != NONE)
            then throw("rq is exist")
        else {
            let recipient = v.drop(48)
            ScriptResult(
                WriteSet(
                    [ 
                        DataEntry(getRqStatusKey(rqId), COMPLETED),
                        DataEntry(getRqAmountKey(rqId), amount),
                        DataEntry(getRqTypeKey(rqId), UNLOCKTYPE)
                    ]),
                TransferSet([ScriptTransfer(Address(recipient), amount, assetId)])
            )
        }
    }
    else if (action == APPROVE) then {
        if (getRqStatus(rqId) == NONE)
            then throw("rq not found")
        else if (getRqStatus(rqId) == COMPLETED)
            then throw("rq was approved")
        else {
            let nextRq = getNextRq(rqId)
            let prevRq = getPrevRq(rqId)
            WriteSet(
                [
                    DataEntry(FirstRqKey, if (firstRq == rqId) then getNextRq(rqId) else firstRq),
                    DataEntry(LastRqKey, if (lastRq == rqId) then getPrevRq(rqId) else lastRq),

                    DataEntry(getNextRqKey(prevRq), nextRq),
                    DataEntry(getPrevRqKey(nextRq), prevRq),

                    DataEntry(getRqStatusKey(rqId), COMPLETED)
                ]
            )
        }
    }
    else 
        throw("invalid action type")   
}

@Callable(i)
func createTransferWrapRq(receiver: String) = {
    let pmt = value(i.payment)
    let rqId = toBase58String(i.transactionId)
    if (pmt.assetId != assetId) 
        then throw("invalid asset in payments")
    else {
        WriteSet(
            [ 
                DataEntry(FirstRqKey, if (firstRq == "") then rqId else firstRq),
                DataEntry(LastRqKey, rqId),

                DataEntry(getNextRqKey(lastRq), rqId),
                DataEntry(getPrevRqKey(rqId), lastRq),
            
                DataEntry(getRqAmountKey(rqId), pmt.amount),
                DataEntry(getRqStatusKey(rqId), NEW),
                DataEntry(getRqReceiverKey(rqId), receiver),
                DataEntry(getRqTypeKey(rqId), LOCKTYPE)
            ]
        )
    }
}