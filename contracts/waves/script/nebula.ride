{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Constants---------------------------
let WAVES = "WAVES"

let IntType = 0
let StringType = 1
let BytesType = 2
#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match (getInteger(this, key)) {
        case v:Int => v
        case _ => 0
      } 
}

func getBytesByKey(key: String) = {
    match (getBinary(this, key)) {
        case v:ByteVector => v
        case _ => base64'0'
    }
}

func getStringByKey(key: String) = {
    match (getString(this, key)) {
        case v:String => v
        case _ => ""
    }
}

func getStringByAddressAndKey(address: Address,key: String) = {
    match (getString(address, key)) {
        case v:String => v
        case _ => ""
    }
}

#-----------------------Key-----------------------------
let OraclesKey = "oracles"
let ConsulsKey = "consuls"
let SubscriberAddressKey = "subscriber_address"
let GravityContractKey = "gravity_contract"
let BftCoefficientKey = "bft_coefficient"
let LasrRoundKey = "last_round"
let TypeKey = "type"
#-------------------Global vars-------------------------
let oracles = getStringByKey(OraclesKey).split(",")
let bftCoefficient = getNumberByKey(BftCoefficientKey)
let gracityContract = addressFromStringValue(getStringByKey(GravityContractKey))
let consuls = getStringByAddressAndKey(gracityContract, ConsulsKey).split(",")
let subscriberAddress = getStringByKey(SubscriberAddressKey)
let type = getStringByKey(TypeKey)

func validateSign(hash: ByteVector, sign: String, oracle: String) = {
    if (sign != "nil") then 
        (if sigVerify(hash, fromBase58String(sign), fromBase58String(oracle)) then 1 else 0) 
    else 0
}
#-------------------Callable----------------------------
@Callable(i)
func sendHashValue(hash: ByteVector, signs: String) = {
    let signList = signs.split(",")
    let count = 
        validateSign(hash, signList[0], oracles[0]) 
        + validateSign(hash, signList[1], oracles[1]) 
        + validateSign(hash, signList[2], oracles[2]) 
        + validateSign(hash, signList[3], oracles[3]) 
        + validateSign(hash, signList[4], oracles[4]) 

    if (count > bftCoefficient)
       then throw("invalid bft count")
    else if(getBytesByKey(toString(height)) != base64'0') 
        then throw("data is exist")
    else {
        WriteSet([
            DataEntry(toString(height), hash)
        ])
    }
}


@Callable(i)
func updateOracles(newSortedOracles: String, stringSigns: String, round: Int) = {
    let signs = stringSigns.split(",")
    let count = validateSign(toBytes(newSortedOracles), signs[0], consuls[0]) +
                validateSign(toBytes(newSortedOracles), signs[1], consuls[1]) +
                validateSign(toBytes(newSortedOracles), signs[2], consuls[2]) +
                validateSign(toBytes(newSortedOracles), signs[3], consuls[3]) +
                validateSign(toBytes(newSortedOracles), signs[4], consuls[4])

    if(count > bftCoefficient) 
        then throw("invalid bft count")
    else {  
        WriteSet([
            DataEntry(OraclesKey, newSortedOracles),
            DataEntry(LasrRoundKey + "_" + toString(round), round)
        ])
    }
}


@Verifier(i)
func sendValueToSub() = {
    match (i) {
        case invokeTx:InvokeScriptTransaction => 
            let vHeight = match (invokeTx.args[1]) {
                case vHeight:Int => vHeight
                case _ => throw("invalid height type")
            }
            let vBytes =
                if (type == IntType) then { 
                    let v = match (invokeTx.args[0]) {
                        case v:Int => v
                        case _ => throw("invalid value type")
                    }
                    toBytes(v)
                } else if (type == StringType) then { 
                    let v = match (invokeTx.args[0]) {
                        case v:String => v
                        case _ => throw("invalid value type")
                    }
                    toBytes(v)
                } else if (type == BytesType) then { 
                    let v = match (invokeTx.args[0]) {
                        case v:ByteVector => v
                        case _ => throw("invalid value type")
                    }
                    v
                } else 
                    throw("invalid value type")

            
           
            
            if (invokeTx.function == "attachValue") 
                then throw("invalid args size")
            else if (invokeTx.args.size() != 2) 
                then throw("invalid args size")
            else if (invokeTx.dApp != addressFromStringValue(subscriberAddress))
                then throw("invalid dapp address")
            else if (getStringByKey(toString(vHeight)) == "")
                then throw("invalid height")
            else if(keccak256(vBytes) != fromBase58String(getStringByKey(toString(vHeight))))
                    then throw("invalid keccak256(value)")
            else {
                true
            }
        case _ => true #TODO
      }
}