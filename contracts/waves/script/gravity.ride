{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Constants.....----------------------
let MaxConsuls = 5 

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match (getInteger(this, key)) {
        case v:Int => v
        case _ => 0
      } 
}
func getStringByKey(key: String) = {
    match (getString(this, key)) {
        case v:String => v
        case _ => ""
    }
}
func getBooleanByKey(key: String) = {
    match (getBoolean(this, key)) {
        case v:Boolean => v
        case _ => false
    }
}
#-----------------------Key-----------------------------
let BftCoefficientKey = "bft_coefficient"
let LastRoundKey = "last_round"

func ConsulsKey(round: Int) = "consuls_" + toString(round)
#-------------------Global vars-------------------------
let bftCoefficient = getNumberByKey(BftCoefficientKey)
let lastRound = getNumberByKey(LastRoundKey)

func consulsByRound(round: Int) = getStringByKey(ConsulsKey(round)).split(",")

func validateSign(hash: ByteVector, sign: String, oracle: String) = {
    if (sign != "nil") then 
        (if sigVerify(hash, fromBase58String(sign), fromBase58String(oracle)) then 1 else 0) 
    else 0
}

#-------------------Callable----------------------------
@Callable(i)
func updateConsuls(newConsuls: String, stringSigns: String, round: Int) = {
    let consuls = consulsByRound(lastRound)
    let msg = toBytes(newConsuls + "," + toString(round))
    let signs = stringSigns.split(",")
    let count = validateSign(msg, signs[0], consuls[0]) +
                validateSign(msg, signs[1], consuls[1]) +
                validateSign(msg, signs[2], consuls[2]) +
                validateSign(msg, signs[3], consuls[3]) +
                validateSign(msg, signs[4], consuls[4])

    if(round <= lastRound)
        then throw("round less last round")
    else if(count > bftCoefficient) 
        then throw("invalid bft count")
    else {  
        WriteSet([
            DataEntry(ConsulsKey(round), newConsuls),
            DataEntry(LastRoundKey, round)
        ])
    }
}