{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-------------------Constants---------------------------
let WAVES = "WAVES"

let IntType = 0
let StringType = 1
let BytesType = 2
#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match (getInteger(this, key)) {
        case v:Int => v
        case _ => 0
      } 
}

func getBytesByKey(key: String) = {
    match (getBinary(this, key)) {
        case v:ByteVector => v
        case _ => base64'0'
    }
}

func getStringByKey(key: String) = {
    match (getString(this, key)) {
        case v:String => v
        case _ => ""
    }
}

func getStringByAddressAndKey(address: Address,key: String) = {
    match (getString(address, key)) {
        case v:String => v
        case _ => ""
    }
}
func getNumberByAddressAndKey(address: Address, key: String) = {
    match (getInteger(address, key)) {
        case v:Int => v
        case _ => 0
      } 
}
#-----------------------Key-----------------------------
let OraclesKey = "oracles"
let SubscriberAddressKey = "subscriber_address"
let TypeKey = "type"
let GravityContractKey = "gravity_contract"
let BftCoefficientKey = "bft_coefficient"

let LastHeightKey = "last_height"
let LastRoundKey = "last_round"
let LastPulseIdKey = "last_pulse_id"

func getHashDataKey(pulseId: Int) = "data_hash_" + toString(pulseId)
func getHeightByPulseKey(pulseId: Int) = "height_" + toString(pulseId)
func ConsulsKey(round: Int) = "consuls_" + toString(round)

#-------------------Global vars-------------------------
let oracles = getStringByKey(OraclesKey).split(",")
let bftCoefficient = getNumberByKey(BftCoefficientKey)
let gracityContract = addressFromStringValue(getStringByKey(GravityContractKey))
let lastGravityRound = getNumberByAddressAndKey(gracityContract, LastRoundKey)
let consuls = getStringByAddressAndKey(gracityContract, ConsulsKey(lastGravityRound)).split(",")
let subscriberAddress = getStringByKey(SubscriberAddressKey)
let type = getNumberByKey(TypeKey)
let lastPulseId = getNumberByKey(LastPulseIdKey)

func getHashData(pulseId: Int) = getBytesByKey(getHashDataKey(pulseId))
func getHeightByPulse(pulseId: Int) = getNumberByKey(getHeightByPulseKey(pulseId))

func validateSign(hash: ByteVector, sign: String, oracle: String) = {
    if (sign != "nil") then 
        (if sigVerify(hash, fromBase58String(sign), fromBase58String(oracle)) then 1 else 0) 
    else 0
}
#-------------------Callable----------------------------
@Callable(i)
func sendHashValue(hash: ByteVector, signs: String) = {
    let signList = signs.split(",")
    let count = 
        validateSign(hash, signList[0], oracles[0]) 
        + validateSign(hash, signList[1], oracles[1]) 
        + validateSign(hash, signList[2], oracles[2]) 
        + validateSign(hash, signList[3], oracles[3]) 
        + validateSign(hash, signList[4], oracles[4]) 

    if (count < bftCoefficient)
       then throw("invalid bft count")
    else if(getBytesByKey(toString(height)) != base64'0') 
        then throw("data is exist")
    else {
        let currentPulseId = lastPulseId + 1
        WriteSet([
            DataEntry(getHashDataKey(currentPulseId), hash),
            DataEntry(getHeightByPulseKey(currentPulseId), height),
            DataEntry(LastHeightKey, height),
            DataEntry(LastPulseIdKey, currentPulseId)
        ])
    }
}

@Callable(i)
func updateOracles(newSortedOracles: String, stringSigns: String, round: Int) = {
    let signs = stringSigns.split(",")
    let count = validateSign(toBytes(newSortedOracles), signs[0], consuls[0]) +
                validateSign(toBytes(newSortedOracles), signs[1], consuls[1]) +
                validateSign(toBytes(newSortedOracles), signs[2], consuls[2]) +
                validateSign(toBytes(newSortedOracles), signs[3], consuls[3]) +
                validateSign(toBytes(newSortedOracles), signs[4], consuls[4])

    if(count > bftCoefficient) 
        then throw("invalid bft count")
    else {  
        WriteSet([
            DataEntry(OraclesKey, newSortedOracles),
            DataEntry(LastRoundKey + "_" + toString(round), round)
        ])
    }
}

@Verifier(i)
func sendValueToSub() = {
    match (i) {
        case invokeTx:InvokeScriptTransaction => 
            let vBytes = {
                if (type == IntType) then { 
                    let v = match (invokeTx.args[0]) {
                        case v:Int => v
                        case _ => throw("invalid value type")
                    }
                    toBytes(v)
                } else if (type == StringType) then { 
                    let v = match (invokeTx.args[0]) {
                        case v:String => v
                        case _ => throw("invalid value type")
                    }
                    toBytes(v)
                } else if (type == BytesType) then { 
                    let v = match (invokeTx.args[0]) {
                        case v:ByteVector => v
                        case _ => throw("invalid value type")
                    }
                    v
                } else 
                    throw("invalid value type")
            }
            let vPulseId = match (invokeTx.args[1]) {
                case vPulseId:Int => vPulseId
                case _ => throw("invalid height type")
            }
            
            if (invokeTx.function != "attachData")
                then throw("invalid function name")
            else if (invokeTx.args.size() != 2) 
                then throw("invalid args size")
            else if (invokeTx.dApp != addressFromStringValue(subscriberAddress))
                then throw("invalid dapp address")
            else if (getHeightByPulse(vPulseId) != height) 
                then throw("invalid height")
            else if (getHashData(vPulseId) == base64'0')
                then throw("invalid pulse id")
            else if(keccak256(vBytes) != getHashData(vPulseId))
                    then throw("invalid keccak256(value)")
            else {
                true
            }
        case _ => sigVerify(i.bodyBytes, i.proofs[0], i.senderPublicKey)
      }
}